[{"path":"https://cyrillagger.github.io/scDiffCom/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 scDiffCom authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-GO-vignette.html","id":"go-terms-data-structures-in-scdiffcom","dir":"Articles","previous_headings":"","what":"GO Terms data structures in scDiffCom","title":"scDiffCom: GO Annotation","text":"First, gene ontology data.table describes location GO term GO ontology graph. particular, note integer column LEVEL proxy distance GO term GO ontology graph “roots” (biological process, molecular function, cellular component). Second, another data.table connects LRIs GO terms. example, mice, two ways accessing : Compute Precomputed - internal scDiffCom data: scDiffCom::LRI_mouse$LRI_curated_GO, computed (1) internally, get_GO_interactions performs assignment GO Terms LRI. allow several modes merging GO terms ligands receptors set GO terms associated LRI. compute LRI_curated_GO mode. follows, compare . Let’s see different assignments GO Terms LRI function merging modes. Firstly, check distribution across LRI maximum level assigned GO Terms. words, LRI, extract levels assigned GO Terms take maximum set. Now let’s check median level distributions:","code":"library(knitr) library(glue) library(data.table) library(ggplot2) library(easyGgplot2) library(scDiffCom)  data(gene_ontology_level) head(gene_ontology_level) plots_max = list() plots_median = list() for (i in 1:length(LRI_curated_GO_list)) {    GO = LRI_curated_GO_list[[i]]   merge_mode = names(LRI_curated_GO_list)[i]      GO = merge(GO, gene_ontology_level, by.x=\"GO_ID\", by.y=\"ID\", all.x=TRUE)   GO = GO[!is.na(GO$LEVEL)]    GO_max_level = GO[, list(max_level = max(LEVEL)), by=\"LRI\"]   plot_max = (ggplot(data=GO_max_level, aes(x=max_level))         + geom_histogram(binwidth = 0.5)        + xlim(0, 18)        # + scale_x_continuous(breaks = 1:18)        + ylim(0, 1200)        + ggtitle(glue::glue(\"{merge_mode}\\nNum GO:LRI={nrow(GO)}\\nN={nrow(GO_max_level)}\\n\"))   )   plots_max[[merge_mode]] = plot_max      GO_median_level = GO[, list(median_level = round(median(LEVEL))), by=\"LRI\"]   # GO_median_level = GO_median_level[!is.na(GO_median_level$median_level), ]   plot_median = (ggplot(data=GO_median_level, aes(x=median_level))         + geom_histogram(binwidth = 0.5)        + xlim(0, 13)        # + scale_x_continuous(breaks = 1:18)        + ylim(0, 2100)        + ggtitle(glue::glue(\"{merge_mode}\\nNum GO:LRI={nrow(GO)}\\nN={nrow(GO_median_level)}\"))   )   plots_median[[merge_mode]] = plot_median    } ggplot2.multiplot(plotlist=plots_max, cols=4) ggplot2.multiplot(plotlist=plots_median, cols=4)"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-GO-vignette.html","id":"overall-go-term-level-distribution","dir":"Articles","previous_headings":"","what":"Overall GO term level distribution","title":"scDiffCom: GO Annotation","text":"present distribution levels GO Terms. provides baseline value expect examining levels relevant GO Terms contexts. compute median level reference.","code":"GO_LEVEL_NO_OTHER = gene_ontology_level[ASPECT != \"other\"] (ggplot(data=GO_LEVEL_NO_OTHER, aes(x=LEVEL))         + geom_histogram(binwidth = 0.5)        + scale_x_continuous(breaks = 1:18)        + ggtitle(glue::glue(\"GO Terms level distribution.\\nN={nrow(GO_LEVEL_NO_OTHER)}\")) ) median(GO_LEVEL_NO_OTHER$LEVEL)"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-GO-vignette.html","id":"exploring-different-merging-modes-on-scdiffcom-toy-object-","dir":"Articles","previous_headings":"","what":"Exploring different merging modes on scDiffCom toy object.","title":"scDiffCom: GO Annotation","text":"Now LRI GO annotations obtained different merging modes. test toy object available package scDiffCom::seurat_sample_tms_liver. First perform raw scDiffCom analysis. perform ORA results using different LRI GO annotations compare results. Finally, plot ORA results different merging modes.","code":"params = list(     LRI_species = \"mouse\",     seurat_celltype_id = \"cell_type\",     seurat_condition_id = list(       column_name = \"age_group\",       cond1_name = \"YOUNG\",       cond2_name = \"OLD\"     ),       object_name = \"scDiffCom_object\",     seurat_assay = \"RNA\",     seurat_slot = \"data\",     log_scale = FALSE,     score_type = \"geometric_mean\",     threshold_min_cells = 5,     threshold_pct = 0.1,     iterations = 1000,     threshold_quantile_score = 0.2,     threshold_p_value_specificity = 0.05,     threshold_p_value_de = 0.05,     threshold_logfc = log(1.5),  # log(1.5)     return_distributions = FALSE,     seed = 42,     verbose = TRUE   )    results = scDiffCom:::run_internal_raw_analysis(   seurat_object = scDiffCom::seurat_sample_tms_liver,   LRI_table = scDiffCom::LRI_mouse$LRI_curated,   LRI_species = \"mouse\",   params = params ) results = scDiffCom::FilterCCI(results)   results_ora = list() for (i in 1:length(LRI_curated_GO_list)) {   GO = LRI_curated_GO_list[[i]]   merge_mode = names(LRI_curated_GO_list)[i]   tryCatch(     {       results_ora[[merge_mode]] = scDiffCom:::run_ora(         object = results,         categories = \"GO_TERMS\",         extra_annotations = NULL,         overwrite = TRUE,         stringent_or_default = \"default\",         stringent_logfc_threshold = NULL,         verbose = TRUE,         class_signature = \"scDiffCom\",         global = FALSE,         LRI_curated_GO = GO       )     },     error=function (cond) {       print(cond)     }   ) }  dt_ora = data.table::data.table() for (i in 1:length(results_ora)) {   merge_mode = names(results_ora)[i]   res = results_ora[[merge_mode]]   tryCatch(     {       dt = res@ora_table$GO_TERMS       dt_m = data.table::melt(         dt,          id.vars = c(\"VALUE_BIS\", \"VALUE\", \"CATEGORY\", \"LEVEL\"),          measure.vars = c(\"BH_P_VALUE_UP\", \"BH_P_VALUE_DOWN\", \"BH_P_VALUE_FLAT\"),          value.name = c(\"P_VAL\")       )       dt_m$variable = as.character(dt_m$variable)       dt_m$TYPE = purrr::map_chr(dt_m$variable, function(s) {strsplit(s, split=\"_\")[[1]][4]})       dt_m = dt_m[dt_m$P_VAL < 0.05, ]       dt_m$MERGE_MODE = merge_mode              dt_ora = rbind(dt_ora, dt_m)     },     error=function (cond) {       print(cond)     }   ) }  dt_ora = dt_ora[!is.na(LEVEL)] dt_ora = dt_ora[TYPE %in% c(\"UP\", \"DOWN\")]  violin_plot = ggplot(data=dt_ora, aes(y=LEVEL, x=MERGE_MODE)) +    geom_violin() +    scale_x_discrete(labels = c(     \"ancestors_intersection\" = glue(\"ancestors_intersection\\nN={table(dt_ora$MERGE_MODE)['ancestors_intersection']}\"),     \"intersection\" = glue(\"intersection\\nN={table(dt_ora$MERGE_MODE)['intersection']}\"),     \"ancestors_union\" = glue(\"ancestors_union\\nN={table(dt_ora$MERGE_MODE)['ancestors_union']}\"),     \"union\" = glue(\"union\\nN={table(dt_ora$MERGE_MODE)['union']}\"),     \"ancestors_ligands\" = glue(\"ancestors_ligands\\nN={table(dt_ora$MERGE_MODE)['ancestors_ligands']}\"),     \"ligands\" = glue(\"ligands\\nN={table(dt_ora$MERGE_MODE)['ligands']}\"),     \"ancestors_receptors\" = glue(\"ancestors_receptors\\nN={table(dt_ora$MERGE_MODE)['ancestors_receptors']}\"),     \"receptors\" = glue(\"receptors\\nN={table(dt_ora$MERGE_MODE)['receptors']}\")   )) +   xlab(\"GO Terms merging modes\") +   ylab(\"Level\") +   ggtitle(\"Distribution of GO Term levels by merging modes.\") +   theme(axis.text.x = element_text(size=12, angle=0)) violin_plot"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"overview-and-terminology","dir":"Articles","previous_headings":"","what":"Overview and terminology","title":"Introduction to scDiffCom","text":"scDiffCom infers intercellular communication changes two conditions interest scRNA-seq data. package can also used without performing differential analysis one interested comparing conditions investigating detected cell-cell interactions. addition vignette, also recommend reading (Nature Aging paper) information statistical methods used package. Important terminology: LRI (ligand-receptor interaction): set genes whose proteins known interact extracellular signalling. package distinguishes simple LRIs (e.g. Apoe:Ldlr) complex/heteromeric LRIs (e.g. Col3a1:Itgb1_Itga2). CCI (cell-cell interaction): communication signal form (B cell, T cell; Apoe:Ldlr) B cell emitter cell type expressing ligand Apoe T cell receiver cell type expressing receptor Ldlr. Note: toy-model results convey meaningful biology.","code":""},{"path":[]},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"load-essential-libraries","dir":"Articles","previous_headings":"Standard intercellular communication differential analysis","what":"Load essential libraries","title":"Introduction to scDiffCom","text":"","code":"library(Seurat) library(scDiffCom) library(data.table)"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"prepare-a-seurat-object","dir":"Articles","previous_headings":"Standard intercellular communication differential analysis","what":"Prepare a Seurat object","title":"Introduction to scDiffCom","text":"input scDiffCom must Seurat object cells annotated cell types. pairwise condition cells also necessary differential analysis. toy-model example, use -sampled Seurat object containing mouse liver cells Tabula Muris Senis. object part package:","code":"seurat_object <- scDiffCom::seurat_sample_tms_liver seurat_object ## An object of class Seurat  ## 726 features across 468 samples within 1 assay  ## Active assay: RNA (726 features, 0 variable features) ##  2 layers present: counts, data  # The object already contains a column \"cell_type\" in its meta.data table(seurat_object[[\"cell_type\"]]) ## cell_type ##                               B cell endothelial cell of hepatic sinusoid  ##                                   84                                  100  ##                           hepatocyte                    myeloid leukocyte  ##                                  100                                  100  ##                               T cell  ##                                   84  # Cells can be grouped based on mice age table(seurat_object[[\"age_group\"]]) ## age_group ##   OLD YOUNG  ##   250   218"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"run-default-analysis","dir":"Articles","previous_headings":"Standard intercellular communication differential analysis","what":"Run default analysis","title":"Introduction to scDiffCom","text":"full detection differential analysis performed function run_interaction_analysis. Several permutation tests performed assess significance specificity differential expression potential cell-cell interaction (CCI). 1000 permutations done default fast sufficient preliminary exploratory analysis. Otherwise, recommend 10’000 permutations. Parallel computing can easily enabled loading future package setting plan accordingly: Running analysis requires specify species, names columns cell-type annotation pairwise condition stored explicit names two conditions: output run_interaction_analysis S4 object class scDiffCom:","code":"# Load future (optional) library(future) plan(sequential) # sequentially in the current R process, equivalent to do nothing #plan(multisession, workers = 4) # background R sessions #plan(multicore, workers = 4) # forked R processes, not Windows/not RStudio # Run differential analysis with default parameters scdiffcom_object <- run_interaction_analysis(   seurat_object = seurat_object,   LRI_species = \"mouse\",   seurat_celltype_id = \"cell_type\",   seurat_condition_id = list(     column_name = \"age_group\",     cond1_name = \"YOUNG\",     cond2_name = \"OLD\"   ) ) ## Extracting data from assay 'RNA' and slot 'data' (assuming normalized log1p-transformed data). ## Converting normalized data from log1p-transformed to non-log1p-transformed. ## Input data: 726 genes, 468 cells and 5 cell-types. ## Input ligand-receptor database: 4582 mouse interactions. ## Number of LRIs that match to genes present in the dataset: 1173. ## Type of analysis to be performed: differential analysis between YOUNG and OLD cells. ## Total number of potential cell-cell interactions (CCIs): 29325 (5 * 5 * 1173). ## Performing permutation analysis (1000 iterations by batches of 1000) on 8952 potential CCIs. ## Performing batch 1 of 1. ## Filtering and cleaning 'raw' CCIs. ## Returning 1896 detected CCIs. ## Performing over-representation analysis on the categories: LRI, LIGAND_COMPLEX, RECEPTOR_COMPLEX, ER_CELLTYPES, EMITTER_CELLTYPE, RECEIVER_CELLTYPE, GO_TERMS, KEGG_PWS. ## Successfully returning final scDiffCom object. scdiffcom_object ## An object of class scDiffCom with name scDiffCom_object ## Analysis performed: differential analysis between YOUNG and OLD cells ## 1896 detected CCIs across 5 cell types ## Over-representation results for LRI, LIGAND_COMPLEX, RECEPTOR_COMPLEX, ER_CELLTYPES, EMITTER_CELLTYPE, RECEIVER_CELLTYPE, GO_TERMS, KEGG_PWS"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"explore-the-results-from-the-shiny-app","dir":"Articles","previous_headings":"Standard intercellular communication differential analysis","what":"Explore the results from the Shiny app","title":"Introduction to scDiffCom","text":"Shiny app can launched scDiffCom object interactively visualize detected CCIs differentially expressed. -representation results also directly available app. option, possible first reduce -represented GO terms semantic similarity displayed treemap. Also note might prompted install several packages.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))   install.packages(\"BiocManager\")  if (!require(\"shiny\")) install.packages(\"shiny\") if (!require(\"shinyWidgets\")) install.packages(\"shinyWidgets\") if (!require(\"shinythemes\")) install.packages(\"shinythemes\") if (!require(\"DT\")) install.packages(\"DT\") if (!require(\"kableExtra\")) install.packages(\"kableExtra\") if (!require(\"RColorBrewer\")) install.packages(\"RColorBrewer\") if (!require(\"igraph\")) install.packages(\"igraph\") if (!require(\"visNetwork\")) install.packages(\"visNetwork\") if (!require(\"plotly\")) install.packages(\"plotly\") if (!require(\"GOSemSim\")) BiocManager::install(\"GoSemSim\") if (!require(\"rrvgo\")) BiocManager::install(\"rrvgo\") if (!require(\"org.Mm.eg.db\")) BiocManager::install(\"org.Mm.eg.db\")  reduced_go_terms <- ReduceGO(scdiffcom_object) # optional  BuildShiny(   scdiffcom_object,   reduced_go_table = reduced_go_terms # NULL by default )"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"explore-the-results-manually","dir":"Articles","previous_headings":"Standard intercellular communication differential analysis","what":"Explore the results manually","title":"Introduction to scDiffCom","text":"Instead using Shiny app, results can also extracted directly scDiffCom object provided accessors: GetParameters() returns list parameters used run_interaction_analysis() GetTableCCI() returns (complete simplified) data.table either detected CCIs hypothetical CCIs. GetTableORA() returns list (complete simplified) data.tables -representation results. , results can analysed visualised either custom scDiffCom functions. Custom volcano plot CCIs:  Dot plots -represented terms:  network -represented cell types cell-type cell-type interactions:","code":"# Retrieve and display all detected CCIs CCI_detected <- GetTableCCI(scdiffcom_object, type = \"detected\", simplified = TRUE)  # Number of CCIs per regulation type (here with age) table(CCI_detected$REGULATION) ##  ## DOWN FLAT  NSC   UP  ##  115  927  820   34  # Retrieve the ORA results ORA_results <- GetTableORA(scdiffcom_object, categories = \"all\", simplified = TRUE)  # Categories available names(ORA_results) ## [1] \"LRI\"               \"LIGAND_COMPLEX\"    \"RECEPTOR_COMPLEX\"  ## [4] \"ER_CELLTYPES\"      \"EMITTER_CELLTYPE\"  \"RECEIVER_CELLTYPE\" ## [7] \"GO_TERMS\"          \"KEGG_PWS\" if (!require(\"ggplot2\")) install.packages(\"ggplot2\") library(ggplot2)  ggplot(   CCI_detected,   aes(      x = LOGFC,      y = -log10(BH_P_VALUE_DE + 1E-2),      colour = REGULATION   ) ) + geom_point( ) + scale_colour_manual(   values = c(\"UP\" = \"red\", \"DOWN\" = \"blue\", \"FLAT\" = \"green\", \"NSC\" = \"grey\") ) + xlab(   \"log(FC)\" ) + ylab(   \"-log10(Adj. p-value)\" ) # Plot the most over-represented up-regulated LRIs # PlotORA returns a ggplot object that you can further optimize (e.g. here to place the legend) PlotORA(   object = scdiffcom_object,   category = \"LRI\",   regulation = \"UP\" ) + theme(   legend.position = c(0.85, 0.4),   legend.key.size = unit(0.4, \"cm\") ) if (!require(\"visNetwork\")) install.packages(\"visNetwork\") if (!require(\"igraph\")) install.packages(\"igraph\") if (!require(\"kableExtra\")) install.packages(\"kableExtra\") if (!require(\"RColorBrewer\")) install.packages(\"RColorBrewer\")  BuildNetwork(   object = scdiffcom_object )"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"detection-only-analysis","dir":"Articles","previous_headings":"","what":"Detection-only analysis","title":"Introduction to scDiffCom","text":"one condition compare, scDiffCom can still used return detected CCIs : Although currently possible explore results Shiny app, functionality added future release package ( well downstream analysis tools).","code":"scdiffcom_detection_only <- run_interaction_analysis(   seurat_object = seurat_object,   LRI_species = \"mouse\",   seurat_celltype_id = \"cell_type\",   seurat_condition_id = NULL ) ## Extracting data from assay 'RNA' and slot 'data' (assuming normalized log1p-transformed data). ## Converting normalized data from log1p-transformed to non-log1p-transformed. ## Input data: 726 genes, 468 cells and 5 cell-types. ## Input ligand-receptor database: 4582 mouse interactions. ## Number of LRIs that match to genes present in the dataset: 1173. ## Type of analysis to be performed: detection analysis without conditions. ## Total number of potential cell-cell interactions (CCIs): 29325 (5 * 5 * 1173). ## Performing permutation analysis (1000 iterations by batches of 1000) on 7352 potential CCIs. ## Performing batch 1 of 1. ## Filtering and cleaning 'raw' CCIs. ## Returning 1947 detected CCIs. ## No over-representation analysis available for the selected parameters. ## Successfully returning final scDiffCom object."},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"database-of-ligand-receptor-interactions","dir":"Articles","previous_headings":"","what":"Database of ligand-receptor interactions","title":"Introduction to scDiffCom","text":"scDiffcom infers cell type cell type communication patterns expression genes known involved ligand-receptor interactions (LRIs). package contains internal databases curated LRIs (human, mouse rat), retrieved previous studies. shown , need call LRI databases explicitly performing analysis. However, can accessed explored follows:","code":"# Load, e.g., the mouse database data(LRI_mouse)  # Display the data.table of LRIs (more information available in other columns) LRI_mouse$LRI_curated[, c(\"LRI\")] ##                        LRI ##    1: 1700013F07Rik:Plscr4 ##    2:  9530003J23Rik:Itgal ##    3:             A2m:Lrp1 ##    4:         Aanat:Mtnr1a ##    5:         Aanat:Mtnr1b ##   ---                      ## 4578:               a:Mc1r ## 4579:               a:Mc2r ## 4580:               a:Mc3r ## 4581:               a:Mc4r ## 4582:               a:Mc5r  # Display the data.table of GO Terms attached to each LRI LRI_mouse$LRI_curated_GO ##                          LRI      GO_ID ##      1: 1700013F07Rik:Plscr4 GO:0005575 ##      2: 1700013F07Rik:Plscr4 GO:0110165 ##      3: 1700013F07Rik:Plscr4 GO:0003674 ##      4: 1700013F07Rik:Plscr4 GO:0005215 ##      5: 1700013F07Rik:Plscr4 GO:0005488 ##     ---                                 ## 247958:               a:Mc5r GO:0065007 ## 247959:               a:Mc5r GO:0050789 ## 247960:               a:Mc5r GO:0050794 ## 247961:               a:Mc5r GO:0007165 ## 247962:               a:Mc5r GO:0019222  # Information about GO terms (more information available in other columns) # LEVEL corresponds to the depth of the GO term in the GO graph data(gene_ontology_level) gene_ontology_level[, c(\"NAME\", \"LEVEL\")] ##                                                         NAME LEVEL ##     1:                             mitochondrion inheritance     8 ##     2:                      mitochondrial genome maintenance     7 ##     3:                                          reproduction     2 ##     4:                 obsolete ribosomal chaperone activity     1 ##     5: high-affinity zinc transmembrane transporter activity    10 ##    ---                                                             ## 47216:                                               part of     1 ## 47217:                                  positively regulates     2 ## 47218:                                             regulates     1 ## 47219:                                         starts_during     1 ## 47220:                                     term tracker item     1"},{"path":[]},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"modifying-default-parameters","dir":"Articles","previous_headings":"Additional functionalities","what":"Modifying default parameters","title":"Introduction to scDiffCom","text":"run_interaction_analysis depends several parameters can modified. encourage carefully read documentation (?run_interaction_analysis). convenience, input parameters stored returned object slot parameters: Among parameters four filtering thresholds can modified recompute results without perform time-consuming permutation analyses . works store intermediate table hypothetic CCIs slot cci_table_raw. disadvantage storing data.table can make object heavy depending dataset. can either decide keep table allowing quickly update results case want modify filtering parameters erase table save space.","code":"# display the first three parameters head(GetParameters(scdiffcom_object), 3) ## $object_name ## [1] \"scDiffCom_object\" ##  ## $LRI_species ## [1] \"mouse\" ##  ## $seurat_celltype_id ## [1] \"cell_type\" # create a new object with a different log fold change threshold scdiffcom_object_stringent_logfc <- FilterCCI(   object = scdiffcom_object,   new_threshold_logfc = log(2) ) ## Filtering and cleaning 'raw' CCIs. ## Returning 1896 detected CCIs. ## Performing over-representation analysis on the categories: LRI, LIGAND_COMPLEX, RECEPTOR_COMPLEX, ER_CELLTYPES, EMITTER_CELLTYPE, RECEIVER_CELLTYPE, GO_TERMS, KEGG_PWS. ## Erasing all previous ORA results: LRI, LIGAND_COMPLEX, RECEPTOR_COMPLEX, ER_CELLTYPES, EMITTER_CELLTYPE, RECEIVER_CELLTYPE, GO_TERMS, KEGG_PWS.  # create a copy of the original object, but without the heavy intermediate table scdiffcom_object_light <- EraseRawCCI(scdiffcom_object)  # the light object cannot be updated anymore FilterCCI(   object = scdiffcom_object_light,   new_threshold_logfc = log(2) ) ## Error in run_filtering_and_ora(object = object, new_threshold_quantile_score = new_threshold_quantile_score, : slot 'cci_table_raw' of 'object' is empty, impossible to filter"},{"path":"https://cyrillagger.github.io/scDiffCom/articles/scDiffCom-vignette.html","id":"performing-ora-on-custom-categories","dir":"Articles","previous_headings":"Additional functionalities","what":"Performing ORA on custom categories","title":"Introduction to scDiffCom","text":"default, ORA performed set categories always present dataset analysed (LRI, GO Terms, etc). However, might want find -represented results category relevant dataset. possible achieve long able build relationship terms new category default category. example, show can perform ORA cell-type families: object now contains new table slot ora_table.","code":"# Create a data.table that associates cell-type families to cell types # Here we use the default category EMITTER_CELLTYPE (RECEIVER_CELLTYPE would also work) cell_families_relation <- data.table(   EMITTER_CELLTYPE = c(     \"B cell\",     \"T cell\",     \"endothelial cell of hepatic sinusoid\",     \"hepatocyte\",     \"myeloid leukocyte\"   ),   EMITTER_CELLFAMILY = c(     \"leukocyte\",     \"leukocyte\",     \"endothelial cell\",     \"epithelial cell\",     \"leukocyte\"   ) )  # Run ORA with the cell type families as extra annotation scdiffcom_object <- RunORA(   object = scdiffcom_object,   extra_annotations = list(     cell_families_relation   ),   overwrite = FALSE ) ## Performing over-representation analysis on the categories: EMITTER_CELLFAMILY. ## Keeping previous ORA results: LRI, LIGAND_COMPLEX, RECEPTOR_COMPLEX, ER_CELLTYPES, EMITTER_CELLTYPE, RECEIVER_CELLTYPE, GO_TERMS, KEGG_PWS."},{"path":"https://cyrillagger.github.io/scDiffCom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cyril Lagger. Author, maintainer. Eugen Ursu. Author. Anais Equey. Contributor.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lagger C, Ursu E (2023). scDiffCom: Differential Analysis Intercellular Communication scRNA-Seq Data. R package version 1.0.0, https://cyrillagger.github.io/scDiffCom/.","code":"@Manual{,   title = {scDiffCom: Differential Analysis of Intercellular Communication from scRNA-Seq Data},   author = {Cyril Lagger and Eugen Ursu},   year = {2023},   note = {R package version 1.0.0},   url = {https://cyrillagger.github.io/scDiffCom/}, }"},{"path":"https://cyrillagger.github.io/scDiffCom/index.html","id":"scdiffcom","dir":"","previous_headings":"","what":"Differential Analysis of Intercellular Communication from scRNA-Seq Data","title":"Differential Analysis of Intercellular Communication from scRNA-Seq Data","text":"scDiffCom stands “single-cell Differential Communication” infers changes intercellular communication two biological conditions scRNA-seq data (Seurat objects). package relies internal collection ligand-receptor interactions (available human, mouse rat) retrieved seven curated databases. * CellChat * CellPhoneDB * CellTalkDB * connectomeDB2020 * ICELLNET * NicheNet * SingleCellSignalR  ","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Differential Analysis of Intercellular Communication from scRNA-Seq Data","text":"","code":"# Install the development version from GitHub devtools::install_github(\"CyrilLagger/scDiffCom\")  # Install release version from CRAN install.packages(\"scDiffCom\")"},{"path":"https://cyrillagger.github.io/scDiffCom/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Differential Analysis of Intercellular Communication from scRNA-Seq Data","text":"introduction, please look documentation vignette. concrete large-scale project used scDiffCom, please look scagecom.org, murine atlas age-related changes intercellular communication.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Differential Analysis of Intercellular Communication from scRNA-Seq Data","text":"Please consider reading citing Nature Aging paper: .","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Display cell-type to cell-type interactive networks — BuildNetwork","title":"Display cell-type to cell-type interactive networks — BuildNetwork","text":"Create plot interactive network summarize cell-types interactions -represented.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display cell-type to cell-type interactive networks — BuildNetwork","text":"","code":"BuildNetwork(   object,   network_type = c(\"ORA_network\"),   layout_type = c(\"bipartite\", \"conventional\"),   abbreviation_table = NULL )  # S4 method for scDiffCom BuildNetwork(   object,   network_type = c(\"ORA_network\"),   layout_type = c(\"bipartite\", \"conventional\"),   abbreviation_table = NULL )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display cell-type to cell-type interactive networks — BuildNetwork","text":"object scDiffCom object network_type Type network display. Currently, ORA_network (default) supported. layout_type Layout network display. Can either \"bipartite\" (default) \"conventional\". abbreviation_table Table abbreviations cell types present object. NULL (default), full names cell-types displayed. Otherwise, must data.frame data.table exactly two columns names ORIGINAL_CELLTYPE ABBR_CELLTYPE.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display cell-type to cell-type interactive networks — BuildNetwork","text":"visNetwork object.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"A shiny app to display scDiffCom results — BuildShiny","title":"A shiny app to display scDiffCom results — BuildShiny","text":"Launch shiny app explore scDiffCom results","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shiny app to display scDiffCom results — BuildShiny","text":"","code":"BuildShiny(object, reduced_go_table = NULL, ...)  # S4 method for scDiffCom BuildShiny(object, reduced_go_table = NULL, ...)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildShiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shiny app to display scDiffCom results — BuildShiny","text":"object scDiffCom object reduced_go_table NULL (default), -represented GO terms displayed dot plots. output  scDiffCom::ReduceGO(object), GO terms displayed treemap  based semantic similarity -representation score ... Additional parameters shiny::runApp","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/BuildShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A shiny app to display scDiffCom results — BuildShiny","text":"Launch shiny app","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/EraseRawCCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of a scDiffCom object without cci_table_raw — EraseRawCCI","title":"Create a copy of a scDiffCom object without cci_table_raw — EraseRawCCI","text":"function replace cci_table_raw empty list. Useful save space large datasets. However, operation, filtering can re-run new object, meaning obtaining results different filtering parameters require perform full analysis scratch.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/EraseRawCCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of a scDiffCom object without cci_table_raw — EraseRawCCI","text":"","code":"EraseRawCCI(object)  # S4 method for scDiffCom EraseRawCCI(object)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/EraseRawCCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of a scDiffCom object without cci_table_raw — EraseRawCCI","text":"object scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/EraseRawCCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of a scDiffCom object without cci_table_raw — EraseRawCCI","text":"scDiffCom object empty list cci_table_raw.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/FilterCCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a scDiffCom object with new filtering parameters — FilterCCI","title":"Filter a scDiffCom object with new filtering parameters — FilterCCI","text":"Filtering (ORA) performed new parameter existing scDiffCom object. slots cci_table_detected ora_table updated accordingly.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/FilterCCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a scDiffCom object with new filtering parameters — FilterCCI","text":"","code":"FilterCCI(   object,   new_threshold_quantile_score = NULL,   new_threshold_p_value_specificity = NULL,   new_threshold_p_value_de = NULL,   new_threshold_logfc = NULL,   skip_ora = FALSE,   extra_annotations = NULL,   verbose = TRUE )  # S4 method for scDiffCom FilterCCI(   object,   new_threshold_quantile_score = NULL,   new_threshold_p_value_specificity = NULL,   new_threshold_p_value_de = NULL,   new_threshold_logfc = NULL,   skip_ora = FALSE,   extra_annotations = NULL,   verbose = TRUE )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/FilterCCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a scDiffCom object with new filtering parameters — FilterCCI","text":"object scDiffCom object new_threshold_quantile_score New threshold value update threshold_quantile_score. NULL (default), value updated. new_threshold_p_value_specificity New threshold value update threshold_p_value_specificity. NULL (default), value updated. new_threshold_p_value_de New threshold value update threshold_p_value_de. NULL (default), value updated. new_threshold_logfc New threshold value update threshold_logfc. NULL (default), value updated. skip_ora Default FALSE. TRUE, ORA performed new parameters ora_table set empty list. May useful one wants quickly test (loop-) several values parameters -pass ORA computing time. extra_annotations Convenience parameter perform ORA user-defined non-standard categories. NULL (default), ORA performed standard categories. Otherwise must list data.tables data.frames (see Details). verbose TRUE (default) progress messages printed.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/FilterCCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a scDiffCom object with new filtering parameters — FilterCCI","text":"scDiffCom object updated results cci_table_detected ora_table.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/FilterCCI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a scDiffCom object with new filtering parameters — FilterCCI","text":"FilterCCI called new parameters,  cci_table_detected ora_table updated.  ORA, call RunORA automatically performed standard  categories. Additional user-defined ORA categories can added via  parameter extra_annotations. data.frames data.tables  list must exactly two columns indicates relationship  values standard category (first column) values new  category (second column). typical example,  vignette  shows perform ORA cell type families attached cell type.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetDistributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the slot distributions from a scDiffCom object — GetDistributions","title":"Return the slot distributions from a scDiffCom object — GetDistributions","text":"Return slot distributions scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetDistributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the slot distributions from a scDiffCom object — GetDistributions","text":"","code":"GetDistributions(object)  # S4 method for scDiffCom GetDistributions(object)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetDistributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the slot distributions from a scDiffCom object — GetDistributions","text":"object scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetDistributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the slot distributions from a scDiffCom object — GetDistributions","text":"List matrices null distributions CCI.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the slot parameters from a scDiffCom object — GetParameters","title":"Return the slot parameters from a scDiffCom object — GetParameters","text":"Return parameters passed  run_interaction_analysis well  parameters computed alongside analysis.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the slot parameters from a scDiffCom object — GetParameters","text":"","code":"GetParameters(object)  # S4 method for scDiffComBase GetParameters(object)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the slot parameters from a scDiffCom object — GetParameters","text":"object scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the slot parameters from a scDiffCom object — GetParameters","text":"list parameters.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableCCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Return (a subset) of the slot cci_table_raw or\n cci_table_detected from a scDiffCom object — GetTableCCI","title":"Return (a subset) of the slot cci_table_raw or\n cci_table_detected from a scDiffCom object — GetTableCCI","text":"Return (subset) slot cci_table_raw  cci_table_detected scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableCCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return (a subset) of the slot cci_table_raw or\n cci_table_detected from a scDiffCom object — GetTableCCI","text":"","code":"GetTableCCI(object, type, simplified)  # S4 method for scDiffCom GetTableCCI(object, type = c(\"detected\", \"raw\"), simplified = TRUE)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableCCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return (a subset) of the slot cci_table_raw or\n cci_table_detected from a scDiffCom object — GetTableCCI","text":"object scDiffCom object type Table extract information . Can either \"detected\" (default) \"raw\". simplified TRUE (default) informative columns data.table returned.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableCCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return (a subset) of the slot cci_table_raw or\n cci_table_detected from a scDiffCom object — GetTableCCI","text":"data.table.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Return some or all ORA tables from the slot ora_table\nfrom a scDiffCom object — GetTableORA","title":"Return some or all ORA tables from the slot ora_table\nfrom a scDiffCom object — GetTableORA","text":"Return ORA tables slot ora_table scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return some or all ORA tables from the slot ora_table\nfrom a scDiffCom object — GetTableORA","text":"","code":"GetTableORA(object, categories, simplified)  # S4 method for scDiffCom GetTableORA(object, categories = \"all\", simplified = TRUE)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return some or all ORA tables from the slot ora_table\nfrom a scDiffCom object — GetTableORA","text":"object scDiffCom object categories Names ORA categories return. \"\" (default), returns . simplified TRUE (default) informative columns data.table returned.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/GetTableORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return some or all ORA tables from the slot ora_table\nfrom a scDiffCom object — GetTableORA","text":"list data.tables.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_human.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of human ligand-receptor interactions. — LRI_human","title":"A collection of human ligand-receptor interactions. — LRI_human","text":"dataset contains data.table curated human ligand-receptor  interactions well related annotations (GO Terms, KEGG Pathways)  metadata.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_human.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of human ligand-receptor interactions. — LRI_human","text":"","code":"data(LRI_human)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_human.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of human ligand-receptor interactions. — LRI_human","text":"list following items: LRI_curated: data.table curated LRIs LRI_curated_GO: data.table GO terms attached    curated LRIs LRI_curated_KEGG: data.table KEGG pathways attached    curated LRIs LRI_retrieved_dates: dates data retrieved    seven external databases LRI_retrieved_from: paths packages data    retrieved LRI_biomart_ensembl_version: version ensembl used    GO annotation","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_human.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A collection of human ligand-receptor interactions. — LRI_human","text":"dataset built internally scDiffCom according  scDiffCom:::build_LRI(species = \"human\"). LRIs retrieved  seven databases (see References). Note curated LRIs  kept.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_human.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A collection of human ligand-receptor interactions. — LRI_human","text":"CellChat (PMID: 33597522),  CellPhoneDB (PMID: 32103204),  CellTalkDB (PMID: 33147626),  connectomeDB2020 (PMID: 33024107),  ICELLNET (PMID: 33597528),  NicheNet (PMID: 31819264),  SingleCellSignalR (PMID: 32196115)","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of mouse ligand-receptor interactions. — LRI_mouse","title":"A collection of mouse ligand-receptor interactions. — LRI_mouse","text":"dataset contains data.table curated mouse ligand-receptor  interactions well related annotations (GO Terms, KEGG Pathways)  metadata.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of mouse ligand-receptor interactions. — LRI_mouse","text":"","code":"data(LRI_mouse)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_mouse.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of mouse ligand-receptor interactions. — LRI_mouse","text":"list following items: LRI_curated: data.table curated LRIs LRI_curated_GO: data.table GO terms attached    curated LRI LRI_curated_KEGG: data.table KEGG pathways attached    curated LRIs LRI_retrieved_dates: dates data retrieved    seven external databases LRI_retrieved_from: paths packages data    retrieved LRI_biomart_ensembl_version: version ensembl used    GO annotation orthology conversion","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_mouse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A collection of mouse ligand-receptor interactions. — LRI_mouse","text":"dataset built internally scDiffCom according  scDiffCom:::build_LRI(species = \"mouse\"). LRIs retrieved  seven databases (see References). Note curated LRIs  kept.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_mouse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A collection of mouse ligand-receptor interactions. — LRI_mouse","text":"CellChat (PMID: 33597522),  CellPhoneDB (PMID: 32103204),  CellTalkDB (PMID: 33147626),  connectomeDB2020 (PMID: 33024107),  ICELLNET (PMID: 33597528),  NicheNet (PMID: 31819264),  SingleCellSignalR (PMID: 32196115)","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_rat.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of rat ligand-receptor interactions. — LRI_rat","title":"A collection of rat ligand-receptor interactions. — LRI_rat","text":"dataset contains data.table curated rat ligand-receptor  interactions well related annotations (GO Terms, KEGG Pathways)  metadata.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_rat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of rat ligand-receptor interactions. — LRI_rat","text":"","code":"data(LRI_rat)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_rat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of rat ligand-receptor interactions. — LRI_rat","text":"list following items: LRI_curated: data.table curated LRIs LRI_curated_GO: data.table GO terms attached    curated LRI LRI_curated_KEGG: data.table KEGG pathways attached    curated LRIs LRI_retrieved_dates: dates data retrieved    seven external databases LRI_retrieved_from: paths packages data    retrieved LRI_biomart_ensembl_version: version ensembl used    GO annotation orthology conversion","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_rat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A collection of rat ligand-receptor interactions. — LRI_rat","text":"dataset built internally scDiffCom according  scDiffCom:::build_LRI(species = \"rat\"). LRIs retrieved  seven databases (see References). Note curated LRIs  kept.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/LRI_rat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A collection of rat ligand-receptor interactions. — LRI_rat","text":"CellChat (PMID: 33597522),  CellPhoneDB (PMID: 32103204),  CellTalkDB (PMID: 33147626),  connectomeDB2020 (PMID: 33024107),  ICELLNET (PMID: 33597528),  NicheNet (PMID: 31819264),  SingleCellSignalR (PMID: 32196115)","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/PlotORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Display top over-represented keywords from a category of interest — PlotORA","title":"Display top over-represented keywords from a category of interest — PlotORA","text":"Plot graph shows top -represented terms given category given regulation. Terms ordered ORA scores, computed odds ratios adjusted p-values.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/PlotORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display top over-represented keywords from a category of interest — PlotORA","text":"","code":"PlotORA(   object,   category,   regulation = c(\"UP\", \"DOWN\", \"FLAT\"),   max_terms_show = 20,   GO_aspect = c(\"biological_process\", \"molecular_function\", \"cellular_component\"),   OR_threshold = 1,   bh_p_value_threshold = 0.05 )  # S4 method for scDiffCom PlotORA(   object,   category,   regulation = c(\"UP\", \"DOWN\", \"FLAT\"),   max_terms_show = 20,   GO_aspect = c(\"biological_process\", \"molecular_function\", \"cellular_component\"),   OR_threshold = 1,   bh_p_value_threshold = 0.05 )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/PlotORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display top over-represented keywords from a category of interest — PlotORA","text":"object scDiffCom object category ORA category display. Must name one category present ora_table. regulation ORA regulation display. Can either (default), FLAT. max_terms_show Maximum number terms display. Default 20. GO_aspect Name GO aspect display category == \"GO_TERMS\". Can either biological_process ( default), molecular_function cellular_component. OR_threshold terms odds ratio threshold displayed. Default 1, meaning filtering performed. bh_p_value_threshold terms adjusted p-value threshold (always 0.05) displayed. Default  0.05.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/PlotORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display top over-represented keywords from a category of interest — PlotORA","text":"ggplot object.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/PlotORA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display top over-represented keywords from a category of interest — PlotORA","text":"ORA score computed product log2(odds ratio) -log10(adj. p-value).","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/ReduceGO.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce scDiffCom GO Terms — ReduceGO","title":"Reduce scDiffCom GO Terms — ReduceGO","text":"Perform semantic similarity analysis reduction  overrepresented GO terms scDiffCom object.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/ReduceGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce scDiffCom GO Terms — ReduceGO","text":"","code":"ReduceGO(   object,   method = c(\"Rel\", \"Resnik\", \"Lin\", \"Jiang\", \"Wang\"),   threshold = 0.7 )  # S4 method for scDiffCom ReduceGO(   object,   method = c(\"Rel\", \"Resnik\", \"Lin\", \"Jiang\", \"Wang\"),   threshold = 0.7 )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/ReduceGO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce scDiffCom GO Terms — ReduceGO","text":"object scDiffCom object method distance method supported rrvgo GOSemSim: c(\"Rel\", \"Resnik\", \"Lin\", \"Jiang\", \"Wang\") threshold Similarity threshold used rrvgo::reduceSimMatrix","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/ReduceGO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce scDiffCom GO Terms — ReduceGO","text":"data.table GO terms reduction","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/ReduceGO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce scDiffCom GO Terms — ReduceGO","text":"function basically wrapper around rrvgo::calculateSimMatrix  rrvgo::reduceSimMatrix.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/RunORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run over-representation analysis — RunORA","title":"Run over-representation analysis — RunORA","text":"Perform -representation analysis (ORA) scDiffCom object, possibility define new categories addition standard ones supported default.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/RunORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run over-representation analysis — RunORA","text":"","code":"RunORA(   object,   categories = c(\"LRI\", \"LIGAND_COMPLEX\", \"RECEPTOR_COMPLEX\", \"ER_CELLTYPES\",     \"EMITTER_CELLTYPE\", \"RECEIVER_CELLTYPE\", \"GO_TERMS\", \"KEGG_PWS\"),   extra_annotations = NULL,   overwrite = TRUE,   verbose = TRUE )  # S4 method for scDiffCom RunORA(   object,   categories = c(\"LRI\", \"LIGAND_COMPLEX\", \"RECEPTOR_COMPLEX\", \"ER_CELLTYPES\",     \"EMITTER_CELLTYPE\", \"RECEIVER_CELLTYPE\", \"GO_TERMS\", \"KEGG_PWS\"),   extra_annotations = NULL,   overwrite = TRUE,   verbose = TRUE )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/RunORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run over-representation analysis — RunORA","text":"object scDiffCom object categories Names standard categories perform ORA. Default standard categories, namely c(\"LRI\", \"LIGAND_COMPLEX\", \"RECEPTOR_COMPLEX\", \"ER_CELLTYPES\", \"EMITTER_CELLTYPE\", \"RECEIVER_CELLTYPE\", \"GO_TERMS\", \"KEGG_PWS\") extra_annotations Convenience parameter perform ORA user-defined non-standard categories. NULL (default), ORA performed standard categories categories. Otherwise must list data.tables data.frames (see Details). overwrite TRUE (default), previous results overwritten case correspond category passed categories. verbose TRUE (default), progress messages printed.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/RunORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run over-representation analysis — RunORA","text":"scDiffCom object updated slot ora_table.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/RunORA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run over-representation analysis — RunORA","text":"Additional user-defined ORA categories can added via  parameter extra_annotations. data.frames data.tables  list must exactly two columns indicates relationship  values standard category (first column) values new  category (second column). typical example,  vignette  shows perform ORA cell type families attached cell type.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/gene_ontology_level.html","id":null,"dir":"Reference","previous_headings":"","what":"All gene ontology terms annotated with their levels — gene_ontology_level","title":"All gene ontology terms annotated with their levels — gene_ontology_level","text":"data.table contains GO terms retrieved package ontoProc. term annotated number ancestors, parents children, well level (.e. depth) gene ontology graph. Levels computed scDiffCom according scDiffCom:::get_GO_LEVELS().","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/gene_ontology_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All gene ontology terms annotated with their levels — gene_ontology_level","text":"","code":"data(gene_ontology_level)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/gene_ontology_level.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All gene ontology terms annotated with their levels — gene_ontology_level","text":"data.table","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/gene_ontology_level.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All gene ontology terms annotated with their levels — gene_ontology_level","text":"ontoProc","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Run (differential) intercellular communication analysis — run_interaction_analysis","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"Perform (differential) cell type cell type communication analysis  Seurat object,  using internal database ligand-receptor interactions (LRIs).  infers biologically relevant cell-cell interactions (CCIs)  change two conditions interest. -representation analysis  automatically performed determine dominant differential signals  level genes, cell types, GO Terms KEGG Pathways.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"","code":"run_interaction_analysis(   seurat_object,   LRI_species,   seurat_celltype_id,   seurat_condition_id,   iterations = 1000,   scdiffcom_object_name = \"scDiffCom_object\",   seurat_assay = \"RNA\",   seurat_slot = \"data\",   log_scale = FALSE,   score_type = \"geometric_mean\",   threshold_min_cells = 5,   threshold_pct = 0.1,   threshold_quantile_score = 0.2,   threshold_p_value_specificity = 0.05,   threshold_p_value_de = 0.05,   threshold_logfc = log(1.5),   return_distributions = FALSE,   seed = 42,   verbose = TRUE )"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"seurat_object Seurat object must contain normalized data relevant meta.data columns (see ). Gene names must  MGI (mouse) HGNC (human) approved symbols. LRI_species Either \"mouse\", \"human\" \"rat\". Indicates LRI database use corresponds species seurat_object. seurat_celltype_id Name meta.data column seurat_object contains cell-type annotations (e.g.: \"CELL_TYPE\"). seurat_condition_id List contains information regarding two conditions perform differential analysis. Must contain following three named items: column_name: name meta.data column   seurat_object indicates condition cell (e.g. \"AGE\") cond1_name: name first condition (e.g. \"YOUNG\") cond2_name: name second condition (e.g. \"OLD\") Can also set NULL perform detection analysis (see Details). iterations Number permutations perform statistical analysis. default (1000) good compromise exploratory analysis obtain reasonably accurate p-values short time. Otherwise, recommend using 10000 iterations run analysis parallel (see Details). Can also set 0 debugging quickly returning partial results without statistical significance. scdiffcom_object_name Name scDiffCom S4 object returned (\"scDiffCom_object\" default). seurat_assay Assay seurat_object extract data. See Details explanation data extracted based three parameters seurat_assay, seurat_slot log_scale. seurat_slot Slot seurat_object extract data. See Details explanation data extracted based three parameters seurat_assay, seurat_slot log_scale. log_scale FALSE (default, recommended), data treated normalized log1p-transformed. See Details explanation data extracted based three parameters seurat_assay, seurat_slot log_scale. score_type Metric used compute cell-cell interaction (CCI) scores. Can either \"geometric_mean\" (default) \"arithmetic_mean\". strongly recommended use geometric mean, especially performing differential analysis. arithmetic mean might used uniquely detection analysis results want compared another package. threshold_min_cells Minimal number cells - given cell type condition - required express gene gene considered expressed corresponding cell type. Incidentally, cell types less cells threshold removed analysis. Set 5 default. threshold_pct Minimal fraction cells - given cell type condition - required express gene gene considered expressed corresponding cell type. Set  0.1 default. threshold_quantile_score Threshold value used conjunction threshold_p_value_specificity establish CCI considered \"detected\". default (0.2) indicates CCIs score 20% lowest-scores considered detected. Can modified without need re-perform permutation analysis (see Details). threshold_p_value_specificity Threshold value used conjunction threshold_quantile_score establish CCI considered \"detected\". CCIs (BH-adjusted) specificity p-value threshold (0.05 default) considered detected. Can modified without need re-perform permutation analysis (see Details). threshold_p_value_de Threshold value used conjunction threshold_logfc establish CCIs differentially expressed cond1_name cond2_name. CCIs (BH-adjusted) differential p-value threshold (0.05 default) considered change significantly. Can modified without need re-perform permutation analysis (see Details). threshold_logfc Threshold value used conjunction threshold_p_value_de establish CCIs differentially expressed cond1_name cond2_name. CCIs absolute logFC threshold (log(1.5) default) considered \"FLAT\". Can modified without need re-perform permutation analysis (see Details). return_distributions FALSE default. TRUE, distributions obtained permutation test returned alongside results. May used testing benchmarking purposes. Can enabled iterations less 1000 order avoid memory issues. seed Set random seed (42 default) obtain reproducible results. verbose TRUE (default), print progress messages.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"S4 object class scDiffCom-class.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"primary use function (package) perform  differential intercellular communication analysis. However, also  possible perform detection analysis (setting  seurat_condition_id NULL), e.g. one wants  infer cell-cell interactions dataset without conditions cells. convention, performing differential analysis, LOGFC computed  log(score(cond2_name)/score(cond1_name)). words,  \"\"-regulated CCIs larger score cond2_name. Parallel computing. possible, recommended  run function parallel order speed analysis large  dataset /obtain better accuracy p-values setting higher  number iterations. simple loading  future  package setting appropriate plan (see also  vignette). Data extraction. UMI read counts matrix extracted  assay seurat_assay slot seurat_slot. default,  assumed seurat_object contains log1p-transformed  normalized data slot \"data\" assay \"RNA\". log_scale  FALSE (recommended), data expm1() transformed  order recover normalized values log scale. Modifying filtering parameters (differential analysis ). long  slot cci_table_raw  returned scDiffCom object erased, filtering parameters can  modified recompute slots cci_table_detected  ora_table, without re-performing time consuming permutation  analysis. may useful one wants fast way analyze  results behave function , say, different LOGFC thresholds. practice,  can done calling functions FilterCCI  RunORA (see also  vignette).","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/run_interaction_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run (differential) intercellular communication analysis — run_interaction_analysis","text":"","code":"if (FALSE) { run_interaction_analysis(   seurat_object = seurat_sample_tms_liver,   LRI_species = \"mouse\",   seurat_celltype_id = \"cell_type\",   seurat_condition_id = list(     column_name = \"age_group\",     cond1_name = \"YOUNG\",     cond2_name = \"OLD\"   ) ) }"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/scDiffCom-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The scDiffCom Class — scDiffCom-class","title":"The scDiffCom Class — scDiffCom-class","text":"object class stores intercellular communication results obtained calling run_interaction_analysis.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/scDiffCom-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The scDiffCom Class — scDiffCom-class","text":"parameters List parameters passed run_interaction_analysis used build object. cci_table_raw Data.table hypothetic CCIs induced original Seurat object internal LRI database. Can erased EraseRawCCI obtain lighter object, might worth keeping one intends modify filtering parameters (see also  vignette). cci_table_detected Data.table detected CCIs. cci_table_raw NULL, can updated new filtering parameters without running full permutation analysis (see FilterCCI). ora_table List data.tables results -representation analysis category. Results additional categories can added RunORA. distributions List matrices null distributions CCI. NULL default.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/seurat_sample_tms_liver.html","id":null,"dir":"Reference","previous_headings":"","what":"A down-sampled Seurat object to use for testing and benchmarking — seurat_sample_tms_liver","title":"A down-sampled Seurat object to use for testing and benchmarking — seurat_sample_tms_liver","text":"Seurat object -sampled original Tabula Muris Senis liver object. Pre-processing normalization performed -sampling. contains 726 features (genes) 468 samples (cells). intended used testing benchmarking contain meaningful biological information.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/seurat_sample_tms_liver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A down-sampled Seurat object to use for testing and benchmarking — seurat_sample_tms_liver","text":"","code":"data(seurat_sample_tms_liver)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/seurat_sample_tms_liver.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A down-sampled Seurat object to use for testing and benchmarking — seurat_sample_tms_liver","text":"object class Seurat.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/seurat_sample_tms_liver.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A down-sampled Seurat object to use for testing and benchmarking — seurat_sample_tms_liver","text":"single-cell transcriptomic atlas characterizes  ageing tissues mouse, Tabula Muris Consortium (2020) (PMID: 32669714)","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/show-scDiffCom-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a scDiffCom object — show,scDiffCom-method","title":"Display a scDiffCom object — show,scDiffCom-method","text":"Display scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/show-scDiffCom-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a scDiffCom object — show,scDiffCom-method","text":"","code":"# S4 method for scDiffCom show(object)"},{"path":"https://cyrillagger.github.io/scDiffCom/reference/show-scDiffCom-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a scDiffCom object — show,scDiffCom-method","text":"object scDiffCom object","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/reference/show-scDiffCom-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a scDiffCom object — show,scDiffCom-method","text":"Print summary console, return value.","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-100","dir":"Changelog","previous_headings":"","what":"scDiffCom 1.0.0","title":"scDiffCom 1.0.0","text":"CRAN release: 2023-11-03 01-11-2023 Prepare CRAN release Update links Nature Aging paper","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-024","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.2.4","title":"scDiffCom 0.2.4","text":"11-04-2023 Change default red-green colors plots Improve README website","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-023","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.2.3","title":"scDiffCom 0.2.3","text":"08-05-2022 Remove mouse rat LRIs “homolog_orthology_confidence” 0, already provided directly one “source database” Remove miss-curated LRIs","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-022","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.2.2","title":"scDiffCom 0.2.2","text":"11-04-2022 Compute (permutation-based) p-values logFC ligand receptor gene independently","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-021","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.2.1","title":"scDiffCom 0.2.1","text":"20-01-2022 Fix bug appeared ‘seurat_object[[]]’ contained column named ‘cell_id’","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-020","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.2.0","title":"scDiffCom 0.2.0","text":"24-11-2021 New function BuildShiny() creates shiny app results New function ReduceGO() reduce GO terms semantic similarity","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-0109000","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.1.0.9000","title":"scDiffCom 0.1.0.9000","text":"09-11-2021 rat LRI database (LRI_rat) added (based orthology conversion) run_interaction_analysis() accepts rat species parameter LRI datasets reduced size Dataset gene_ontology_level now available data (instead internal data)","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-01","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.1","title":"scDiffCom 0.1","text":"04-07-2021 steps run_interaction_analysis tested exported functions tested LRI databases curated Complete roxygen-based documentation Vignette contains main functionalities","code":""},{"path":"https://cyrillagger.github.io/scDiffCom/news/index.html","id":"scdiffcom-0009000","dir":"Changelog","previous_headings":"","what":"scDiffCom 0.0.0.9000","title":"scDiffCom 0.0.0.9000","text":"Added NEWS.md file track changes package. Added first proper documentation Added first version vignette","code":""}]
